## Line Graphs and Time Series


#Import the pyplot submodule as plt
import matplotlib.pyplot as plt
month_number = [1, 2, 3, 4, 5, 6, 7]
new_deaths = [213, 2729, 37718, 184064, 143119, 136073, 165003]

#Plot a line graph using plt.plot(), where month_number gives the x-coordinates, and new_deaths gives the y_coordinates
plt.plot(month_number, new_deaths)
#Display the plot using plt.show()
plt.show()


#Customizing a Graph
import matplotlib.pyplot as plt

month_number = [1, 2, 3, 4, 5, 6, 7]
new_deaths = [213, 2729, 37718, 184064, 143119, 136073, 165003]

#plt.title(), add the title 
plt.plot(month_number, new_deaths)
plt.title('New Reported Deaths By Month (Globally)')
plt.xlabel('Month Number')
plt.ylabel('Number Of Deaths')
plt.show()


import pandas as pd
#Read in the WHO_time_series.csv file
who_time_series = pd.read_csv('WHO_time_series.csv')

#Modify the Date_reported column in who_time_series to a datetime data type

who_time_series['Date_reported'] = pd.to_datetime(who_time_series['Date_reported'])
print(who_time_series.head(5))
print('\n')
print(who_time_series.tail(5))
print('\n') 
print(who_time_series.info())


##Types of Line Graphs
#Plot a line graph Argentina.


#Isolate the data for Argentina in a variable named argentina
argentina = who_time_series[who_time_series['Country'] == 'Argentina']

#Plot the Cumulative_cases
plt.plot(argentina['Date_reported'], argentina['Cumulative_cases'])
plt.title('Argentina: Cumulative Reported Cases')
plt.xlabel('Date')
plt.ylabel('Number Of Cases')
plt.show()

#Determine the type of growth by examining the line graph.
#Assign your answer to the variable argentina_graph_type
argentina_graph_type = 'exponential'



'''
we're going to add a legend that shows which color corresponds to which country. In the code below, we first add a label argument to the plt.plot() function, and then we use the plt.legend() function:

When we use plt.plot() the first time, Matplotlib creates a line graph. When we use plt.plot() again, Matplotlib creates another line graph that shares the same x- and y-axis as the first graph. If we want Matplotlib to draw the second line graph separately, we need to close the first graph with the plt.show() function. '''

france = who_time_series[who_time_series['Country'] == 'France']
uk = who_time_series[who_time_series['Country'] == 'The United Kingdom']
italy = who_time_series[who_time_series['Country'] == 'Italy']


#Plot the evolution of cumulative cases for France, the United Kingdom, and Italy on the same graph.
#Add a legend to the graph using plt.legend(). Use the labels France, The UK, and Italy
plt.plot(france['Date_reported'], france['Cumulative_cases'],
         label='France')
plt.plot(uk['Date_reported'], uk['Cumulative_cases'],
         label='The UK')
plt.plot(italy['Date_reported'], italy['Cumulative_cases'],
         label='Italy')
plt.legend()
plt.show()
#Which country has the greatest number of cases at the end of July?
greatest_july = 'The UK'
#Which country has the lowest number of cases at the end of July?
lowest_july = 'France'
#Which country shows the greatest increase during March?
increase_march = 'Italy'



import pandas as pd
import matplotlib.pyplot as plt

bike_sharing = pd.read_csv('day.csv')
#When we pass a series of strings to plt.plot(), Matplotlib doesn't know how to handle that very well
bike_sharing['dteday'] = pd.to_datetime(bike_sharing['dteday'])

plt.plot(bike_sharing['dteday'], bike_sharing['cnt'])
plt.xticks(rotation=45)
plt.show()

#now the dates on the bottom of the graph are overlapping and we can barely read them. To fix this, we can rotate the labels using the plt.xticks() function
