import pandas as pd
f500 = pd.read_csv('f500.csv', index_col=0) #using the pandas CSV reader
f500.index.name = None

f500_type = type(f500) 
f500_shape = f500.shape #displays the shape of the dataset in row by column
print(f500_type)
print(f500_shape)

print(f500.head(3)) # would display the header and first 3 rows in the dataset
print(f500.tail(3)) # would display the last 3 rows in the dataset
f500_top_6 = f500.head(6)
f500_bottom_8 = f500.tail(8)


#overview of all the dtypes used in our DataFrame, along with its shape and other information, we can use the DataFrame.info() method
f500.info()


#There are two types of labels in pandas: Row Labels and Column Labels.
# df.loc[row_label, column_label]
# Select a Single Column
# dataFra.loc[:, "col_name"]
# we can also use f500_selection["rank"]
industries = f500["industry"]
industries_type = type(industries)
print(industries, '\n')
print(industries_type)


#Selecting Columns from a DataFrame by Label 
#this is for a single selection
countries = f500["country"]
#this works for multiple columns selection
revenues_years = f500[["revenues", "years_on_global_500_list"]]

#printing slices in a range, We will have to do the full specification using .loc
ceo_to_sector = f500.loc[:,"ceo" : "sector"]



"""Select the country column from f500 and save it to the variable countries.
Use the Series.value_counts() method to get the value counts for each unique non-null value in countries and save the results in the variable country_counts.
Print the variable country_counts to determine which country has the most companies on the Fortune 500 list and save that country's name as a string in the variable top_country."""

#Sample application of  the value_counts method on series data
countries = f500["country"]
country_counts = countries.value_counts()
print(country_counts)
top_country = 'USA'

hq_locations =f500["hq_location"]
hql_counts = hq_locations.value_counts()
print(hql_counts)
top_hq_city ='Beijing, China'

#Sample application of  the value_counts method on dataFrames

sectors_industries = f500[["sector", "industry"]]
print(type(sectors_industries))
si_value_counts = sectors_industries.value_counts()
print(si_value_counts)

#Series.describe() method tells us how many non-null values are contained in the series
#along with the mean, minimum, maximum

rank = f500["rank"]
rank_desc = rank.describe()
print(rank_desc)
prev_rank = f500["previous_rank"]
prev_rank_desc = prev_rank.describe()
print(prev_rank_desc)

#Method Chaining
#a way to combine multiple methods together in a single line.
prev_rank = f500["previous_rank"]
zero_previous_rank = prev_rank.value_counts().loc[0]

#using method chaining 
zero_using_chaining = f500["previous_rank"].value_counts().loc[0]


#Dataframe Exploration Methods
medians = f500[["revenues", "profits"]].median(axis=0)
# we could also use .median(axis="index")
print(medians)
#f500.info()
numeric_only = f500[["rank", "revenues", "revenue_change", "profits", "assets", "profit_change", "previous_rank", "years_on_global_500_list", "employees", "total_stockholder_equity"]]
max_f5001 = numeric_only.max(axis = 0)
max_f500 = f500.max(numeric_only = True)



#Dataframe Describe Method: can use to explore the dataframe more quickly
#By default, DataFrame.describe() will return statistics for only numeric columns.
# If we wanted to get just the object columns, we need to use the include=['O'] parameter:
describe = f500.describe(include=['O'])
f500_desc = f500.describe()
#Series.describe() method returns a series object, the DataFrame.describe() method returns a dataframe object



# Assignment with pandas
#top5_rank_revenue = f500[["rank", "revenues"]].head()
#print(top5_rank_revenue)
#top5_rank_revenue["revenues"] = 0
#print(top5_rank_revenue)
#top5_rank_revenue.loc["Sinopec Group", "revenues"] = 999
#print(top5_rank_revenue)
f500.loc["Dow Chemical", "ceo"] = "Jim Fitterling"


# Using Boolean Indexing with pandas Objects
#Create a boolean series, motor_bool, that compares whether the values in the industry column from the f500 dataframe are equal to "Motor Vehicles and Parts"

motor_bool = f500["industry"] == "Motor Vehicles and Parts"
#Use the motor_bool boolean series to index the country column. Assign the result to motor_countries
motor_countries = f500.loc[motor_bool, "country"]


# Using Boolean Arrays to Assign Values
import numpy as np
prev_rank_before = f500["previous_rank"].value_counts(dropna=False).head()

#Use boolean indexing to update values in the previous_rank column of the f500 dataframe:
prev_bool = f500["previous_rank"] == 0
#There should now be a value of np.nan where there previously was a value of 0
f500.loc[prev_bool, "previous_rank"] = np.nan
#Create a new pandas series, prev_rank_after, using the same syntax that was used to create the prev_rank_before series.
prev_rank_after = f500["previous_rank"].value_counts(dropna = False).head()


#Creating New Column (rank_change) in Pandas DataFrame
f500["rank_change"] = f500["previous_rank"] - f500["rank"]

rank_change_desc = f500["rank_change"].describe()



#Exploring Data with Pandas: Fundamentals
#Challenge: Top Performers by Country
top_2_countries = f500["country"].value_counts().head(2)
print(top_2_countries)

#Create a series, industry_usa, containing counts of the two most common values in the industry column for companies headquartered in the USA.
industry_usa_bool = f500["country"] == "USA"
industry_usa = f500.loc[industry_usa_bool, "industry"].value_counts().head(2)

#Create a series, sector_china, containing counts of the three most common values in the sector column for companies headquartered in China
sector_bool = f500["country"] == "China"
sector_china = f500.loc[sector_bool, "sector"].value_counts().head(3)



import pandas as pd
#The dataset has already been loaded into a pandas dataframe and assigned to the f500 variable. 
# read the dataset into a pandas dataframe
f500 = pd.read_csv("f500.csv", index_col=0)
f500.index.name = None

# replace 0 values in the "previous_rank" column with NaN
f500.loc[f500["previous_rank"] == 0, "previous_rank"] = np.nan

#Select the rank, revenues, and revenue_change columns in f500. Then, use the DataFrame.head() method to select the first five rows. Assign the result to f500_selection
f500_selection = f500[["rank", "revenues", "revenue_change"]].head()


f500 = pd.read_csv("f500.csv")
# To assign a Index name
f500.index.name = "Company"
#To assign a column name
f500.columns.name = "Metric"
f500.loc[f500["previous_rank"] == 0, "previous_rank"] = np.nan
#print(f500[["rank", "revenues"]])
